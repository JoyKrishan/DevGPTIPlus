enum Gender {
  MALE
  FEMALE
  PREFERNOTTOSAY
}

enum PosterSource {
  RAW
  GITHUB
}

model Post2 {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/v11/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
// * gender: User gender, default to prefer not to say.
  id                   Int               @id @unique @default(autoincrement())
  clerkId              String            @unique
  username             String            @unique @db.Char(20)
  streak               Int               @default(0)
  exerciseHistory      ExerciseLog[]
  savedWorkouts        WorkoutTemplate[]
  notifications        Notification[]    @relation("NotificationReceiver")
  sentMessages         Notification[]    @relation("NotificationSender")
  createdChats         Chat[]            @relation("ChatCreator")
  notificationsBanners Boolean           @default(true)
  gender               Gender?           @default(PREFERNOTTOSAY)
  finishedAt DateTime @default(now())
  duration   Int
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id])
  workoutTemplateId Int
model WorkoutTemplate {
  id           Int          @id @unique @default(autoincrement())
  name         String       @db.Char(100)
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  likes        Int          @default(0)
  exerciseIds  Int[]
  pastWorkouts WorkoutLog[]
  id           Int           @id @unique @default(autoincrement())
  name         String        @db.Char(100)
  note         String?
  bodyPart     BodyPart
  category     Category
  exerciseLogs ExerciseLog[]

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model ExerciseLog {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int

  workoutTemplateId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int
  id            String      @id @default(uuid())
  type          SetType     @default(NORMAL)
  unilateral    Boolean     @default(false)
  reps          Int[]
  weight        Float[]
  exerciseLog   ExerciseLog @relation(fields: [exerciseLogId], references: [id])
  exerciseLogId Int